#!/usr/bin/env bash

# USER CUSTOMIZABLE VARIABLES
CARD_POOL_SIZE=10        ######## How large the pool size is for shuf to draw from
SEARCH_DEPTH=999         ######### How many levels to recursively search for .csv's in Temp/MEGA/Flash
PREVIEWER='bat'          ########## What fzf previewer to use when searching through decks
CURR_DECK_DISPLAY="file" # Options are 'file' or 'path'

# ANSI FOREGROUND ESCAPE COLORS
RED='\033[0;31m'
LRED='\033[1;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
LGREEN='\033[1;32m'
LBLUE='\033[1;34m'
CYAN='\033[0;36m'
LCYAN='\033[1;36m'
ORANGE='\033[0;33m'
LGREY='\033[0;37m'
WHITE='\033[1;37m'
NC='\033[0m' # No Color

# ANSI BACKGROUND ESCAPE COLORS
WHITEBG='\033[1;47m'
# FONT FORMAT EXCAPE CODES
BOLD='\e[1m'

# Remember User's Starting Directory
PWD="$(pwd)"
# Where Decks Are Located for linux & mac
# Prefer XDG Configuration before hard coded file paths
OS="$(uname)"
case "$OS" in
"Darwin") DIR="${XDG_DATA_HOME:-$HOME/Library/Application Support}/Flash" && alias shuf=gshuf ;;
"Linux") DIR="${XDG_DATA_HOME:-$HOME/Temp/MEGA}/Flash" ;;
*) DIR="${XDG_DATA_HOME:-$HOME/Temp/MEGA}/Flash" ;;
esac
# Where the example deck will be placed and named
EXAMPLE_DECK="$DIR/deck.csv"
# Track High score
HIGH_SCORE="$DIR/.highscore"
# Track number of cards reviewed per session
REVIEW_LOG="$DIR/.reviews"
# Iterator for Count of cards reveiwed
COUNTER=0
# Success message of setup process
DIR_MADE_MSG="
Your ${LRED}$DIR${NC} directory has been made and
your ${ORANGE}deck.csv${NC} file is ready for you to enter your Flashcard data
If you want to see information about ${ORANGE}fla.sh${NC} then use the option
${YELLOW}Flash -i${NC}.
"
# User has Temp/MEGA directory but no decks inside
NO_DECKS="
No decks were found, please make a new deck
using ${ORANGE}:${NC} as a delimiter in a ${ORANGE}.csv${NC} file in
the ${LRED}$DIR${NC} directory.

An example of a card:
${GREEN}Math:What is the square root of 4?:2:0${NC}
"
# The example Flashcard deck to be made
DECK_TEMPLATE="History:When was the declaration of independence signed?:1776:0"

# Define setup process in a function and create necessary files for user
setup() {
    mkdir "$DIR" &&
        touch {"$EXAMPLE_DECK","$HIGH_SCORE","$REVIEW_LOG"} &&
        echo "$DECK_TEMPLATE" >>"$EXAMPLE_DECK" &&
        echo -e "$DIR_MADE_MSG"
}

# Test if Temp/MEGA exists and wether to offer setup process
if [ ! -d "$DIR" ]; then
    echo -e "No ${LRED}$DIR${NC} directory, make it? ${LGREEN}Y${NC}/${LRED}N${NC}"
    # shellcheck disable=SC2162
    read RESPONSE
    case "$RESPONSE" in
    [QqNn]) exit 0 ;;
    [Yy]) setup && exit 0 ;;
    *) >&2 echo -e "invalid choice, please select either ${LGREEN}y${NC} or ${LRED}n${NC}" && exit 1 ;;
    esac
fi

# go to the Flashcard decks directory
cd "$DIR" || exit 1

# If there are no Flashcard decks available return user to starting location
# while also displaying explanatory text of issue
[ "$(find . -maxdepth "$SEARCH_DEPTH" -iname "*.csv" | wc -l)" = 0 ] &&
    >&2 echo -e "$NO_DECKS" && exit 1

# if highscore file was removed, remake it.
[ ! -e "$HIGH_SCORE" ] && touch "$HIGH_SCORE"

# if reviewed file was removed, remake it.
[ ! -e "$REVIEW_LOG" ] && touch "$REVIEW_LOG"

print_usage() {
    echo -e "\n${LCYAN}fla.sh --- Flash card system by Bryan Jenks${NC} ${LBLUE}<BryanJenks@protonmail.com>${NC}\n\n${YELLOW}${BOLD}Usage:${NC}\n\t${GREEN}Flash -h:${NC} Print this help text\n\t${GREEN}flash -i:${NC} Print Information about the flashcard system\n\t${GREEN}flash -v:${NC} Print version Number\n\t${GREEN}flash -p [BINARY]:${NC} Change the previewer when selecting decks.\n\t\tDefault: ${GREEN}bat${NC}\n\t\tSupported: ${GREEN}bat${NC}, ${GREEN}cat${NC}\n"
}

print_info() {
    echo -e "\nThis Flash card system works via colon ${YELLOW}:${NC} seperated ${YELLOW}.csv${NC} files\n
with entries that look like this: ${LGREY}category:question:answer:0${NC}\n
These ${YELLOW}.csv${NC} files should be stored in your

\t${YELLOW}\$XDG_DATA_HOME/Flash${NC}
OR
\t${YELLOW}~/Temp/MEGA/Flash${NC} for Linux
\t${YELLOW}~/Library/Application Support/Flash${NC} for mac
-------------------------------------------------------------------------------
${LCYAN}Exiting:${NC}\n
\tYou can exit the application at any time by pressing either ${RED}q${NC} or ${RED}Q${NC}

${LCYAN}Usage:${NC}\n
\tYou will first be prompted with a question and will need to press ${RED}[Enter]${NC}
\tto reveal the answer. Once the answer is revealed you will need to either
\tquit, or give a rating to how difficult the question was.

${LCYAN}The Scoring System:${NC}\n
\tThe last field in the ${YELLOW}.csv${NC} files is the current point score of the 'card'
\tEvery time you rate a card the point score will either increase, decrease,
\tor stay the same. zero is the lowest value, and the upper limit is over
\t100 billion.

\t${CYAN}Scoring Results:${NC}
\t\t[${LRED}Hard${NC}]\t\t-2 points
\t\t[${RED}Difficult${NC}]\t-1 point
\t\t[${YELLOW}Normal${NC}]\tNo Change
\t\t[${GREEN}Mild${NC}]\t\t+1 point
\t\t[${LGREEN}Easy${NC}]\t\t+2 points

\tThe cards with the lowest scores (you scored them as ${LRED}Hard${NC}/${RED}Difficult${NC}) are
\tsorted to the top, a pool of them are picked and from that pool 1 card is
\trandomly drawn. As you become more familair with the material and rate it
\tas easier, the point values will go up and the cards will appear less
\tfrequently making room for those cards that are still difficult and have
\tlower point values.

    It is a good idea to start all cards off at ${YELLOW}0${NC} initially so that they all
    have an equal chance of being drawn initially.
"
}

while getopts 'hivp:' flag; do
    case "${flag}" in
    h) print_usage && exit 0 ;;
    i) print_info && exit 0 ;;
    v) echo -e "\n${YELLOW}fla.sh Current Version:${NC} ${RED}1.2${NC}\n" && exit 0 ;;
    p) { [[ $(command -v "$OPTARG" 2>&1) ]] && PREVIEWER=$OPTARG; } || >&2 echo "Unable to find previewer $OPTARG. Exiting..." && exit 1 ;;
    *) print_usage && exit 1 ;;
    esac
done

# Set some parameters for preview command used by FZF
while [ -z "$PREVIEWER_PARAMTERS" ]; do
    case "$PREVIEWER" in
    bat) PREVIEWER_PARAMTERS="--theme='Solarized (dark)' --style=numbers --color=always" ;;
    cat) PREVIEWER_PARAMTERS="-b" ;;
    *) echo -e "${RED}$PREVIEWER${NC} is not a valid previewer. Use '${GREEN}bat${NC}' or '${GREEN}cat${NC}'. Falling back on default...\n" && read -r -s -p 'Press [Enter] to continue...' && echo -e "\n" && PREVIEWER='bat' ;;
    esac
done

# Show pretty FZF preview of decks using $PREVIEWER. Default: BAT
DECK="$(find . -maxdepth "$SEARCH_DEPTH" -iname "*.csv" | fzf --preview="$PREVIEWER $PREVIEWER_PARAMTERS {} | head -500")"

# Get current deck name for display
case "$CURR_DECK_DISPLAY" in
file) CURRENT_DECK="$(echo "$DECK" | awk -F/ '{print $NF}')" ;;
path) CURRENT_DECK="$DECK" ;;
*) CURRENT_DECK="$(echo "$DECK" | awk -F/ '{print $NF}')" ;;
esac

# The top part of the Flash display so that code is not duplicated twice
print_head() {

    QUESTION=$(echo "${q[1]}" | fold -w 59)

    echo -e "${WHITEBG}          Fla.sh - Flash Cards In Your Terminal            ${NC}
${ORANGE}${BOLD}  Current Deck:${BOLD}${NC}\t$(basename -s .csv "$CURRENT_DECK")
${ORANGE}${BOLD}Cards Reviewed:${BOLD}${NC}\t$COUNTER
\t${ORANGE}${BOLD}High Score:${BOLD}${NC}\t$(cat "$HIGH_SCORE")
\t${ORANGE}${BOLD}Avg review:${BOLD}${NC}\t$(awk '{ sum += $7; n++ } END { if (n > 0) print sum / n; }' "$REVIEW_LOG")

${LGREY}Category:${NC} ${q[0]}
___________________________________________________________

$([ ${#QUESTION} -lt 59 ] && printf "%$(((59 - ${#QUESTION}) / 2))s")$QUESTION"

}

# Creating new entries in the log for the average score generation
add_usage_entry() {
    if [ ! "$COUNTER" = 0 ]; then
        # Create a New Entry
        TIME_STAMP=$(date +"%Y%m%d %H:%M:%S")
        printf -v ENTRY "TimeStamp: %s Deck: %s cardsReviewed: %s" "$TIME_STAMP" "$CURRENT_DECK" "$COUNTER"
        echo "$ENTRY" >>"$REVIEW_LOG"
    fi
}

# If no deck is selected in fzf menu
# return user to start location
# and exit quietly
[ -z "$DECK" ] && clear && exit 1

main() {
    IFS=$','
    # shellcheck disable=SC2162
    read -a q <<<"$(sort "$DECK" -n --field-separator=, --key=4 | head -n "$CARD_POOL_SIZE" | shuf -n 1)"
    clear
    print_head
    echo -e "
${LGREY}──────────────── Press [Enter] to continue ────────────────${NC}"
    # shellcheck disable=SC2162
    read -sn 1 NEXT
    while [ ! "$NEXT" = "" ] && [ ! "$NEXT" = q ] && [ ! "$NEXT" = Q ]; do
        # shellcheck disable=SC2162
        read -sn 1 NEXT
    done
    clear
    print_head
    { [ "$NEXT" = q ] || [ "$NEXT" = Q ]; } && add_usage_entry && clear && exit 0

    ANSWER=$(echo "${q[2]}" | fold -w 59)

    echo -e "___________________________________________________________

$([ ${#ANSWER} -lt 59 ] && printf "%$(((59 - ${#ANSWER}) / 2))s")$ANSWER

${WHITEBG}${WHITE}===========================================================${NC}

${LGREY}How Difficult Was This Question?${NC}

${LRED}Hard${NC} [1]   ${RED}Difficult${NC} [2]   ${YELLOW}Normal${NC} [3]   ${GREEN}Mild${NC} [4]   ${LGREEN}Easy${NC} [5]

${LGREY}Select a number to continue, or${NC} ${LRED}Q${NC} ${LGREY}to quit...${NC}"
    # shellcheck disable=SC2162
    read -sn 1 DIFFICULTY_SCORE
    while [[ ! "$DIFFICULTY_SCORE" =~ [12345qQ] ]]; do
        # shellcheck disable=SC2162
        read -sn 1 DIFFICULTY_SCORE
    done
    { [ "$DIFFICULTY_SCORE" = q ] || [ "$DIFFICULTY_SCORE" = Q ]; } &&
        add_usage_entry && clear && exit 0
    clear

    COUNTER="$((COUNTER + 1))" # Increment count for card review count increment

    if [ "${q[3]}" = 0 ]; then
        NEW_ITEM_SCORE=0
        case "$DIFFICULTY_SCORE" in
        [123]) NEW_ITEM_SCORE=0 ;; #HARD DIFFICULTY & NORMAL
        4) NEW_ITEM_SCORE=1 ;; #MILD
        5) NEW_ITEM_SCORE=2 ;; #EASY
        *) NEW_ITEM_SCORE=0 ;; #INVALID
        esac

    elif [ "${q[3]}" = 1 ]; then
        case "$DIFFICULTY_SCORE" in
        1) NEW_ITEM_SCORE=0 ;; #HARD
        2) NEW_ITEM_SCORE=0 ;; #DIFFICULT
        3) NEW_ITEM_SCORE=1 ;; #NORMAL
        4) NEW_ITEM_SCORE=2 ;; #MILD
        5) NEW_ITEM_SCORE=3 ;; #EASY
        *) NEW_ITEM_SCORE=1 ;; #INVALID
        esac
    else
        case "$DIFFICULTY_SCORE" in
        1) NEW_ITEM_SCORE="$((q[3] - 2))" ;; #HARD
        2) NEW_ITEM_SCORE="$((q[3] - 1))" ;; #DIFFICULTY
        3) NEW_ITEM_SCORE="${q[3]}" ;; #NORMAL
        4) NEW_ITEM_SCORE="$((q[3] + 1))" ;; #MILD
        5) NEW_ITEM_SCORE="$((q[3] + 2))" ;; #EASY
        *) NEW_ITEM_SCORE="${q[3]}" ;; #INVALID
        esac
    fi

    # Update item score for each Flashcard item
    ## Remove forward slashes in the Questions and answers

    QUESTION_REGEX="$(sed "s/\(\/\|\[\|\]\|\*\)/\\\\\1/g" <<<"${q[1]}")"
    ANSWER_REGEX="$(sed "s/\(\/\|\[\|\]\|\*\)/\\\\\1/g" <<<"${q[2]}")"
    sed -i .bak "s/${q[0]}:$QUESTION_REGEX:$ANSWER_REGEX:${q[3]}/${q[0]}:$QUESTION_REGEX:$ANSWER_REGEX:$NEW_ITEM_SCORE/g" "$DECK" && rm ./*.bak
    
    # If no highscore currently set, set it.
    [ -z "$(cat "$HIGH_SCORE")" ] && echo "$COUNTER" >"$HIGH_SCORE"

    # If Cards Reviewed > Current High Score, Update
    [ "$COUNTER" -gt "$(cat "$HIGH_SCORE")" ] && echo "$COUNTER" >"$HIGH_SCORE"
}

while true; do
    main
done
